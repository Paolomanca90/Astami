// <auto-generated />
using System;
using Astami.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Astami.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Astami.Models.Abbonamento", b =>
                {
                    b.Property<Guid>("AbbonamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Durata")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AbbonamentoId");

                    b.HasIndex("Nome");

                    b.ToTable("Abbonamento");

                    b.HasData(
                        new
                        {
                            AbbonamentoId = new Guid("49b523f0-8654-41d4-bffb-73a1c92f3438"),
                            Descrizione = "Dashboard gestionale privata, Caricamento e gestione immobili, Accesso clienti con richieste digitali, Notifiche automatiche e report base",
                            Durata = 30,
                            Nome = "Basic",
                            Prezzo = 99.00m
                        },
                        new
                        {
                            AbbonamentoId = new Guid("fd4c0cec-956b-4950-b83a-e82bb0eae888"),
                            Descrizione = "Tutto nel piano Basic, Offerte libere digitalizzate, Personalizzazione tempistiche, Notifiche smart per clienti e agenti, Report avanzati sulle performance",
                            Durata = 30,
                            Nome = "PRO",
                            Prezzo = 149.00m
                        },
                        new
                        {
                            AbbonamentoId = new Guid("a05eb488-8980-432d-b9e8-f981530327e9"),
                            Descrizione = "Tutto nel piano Pro, Firma digitale e gestione contratti, Pagamenti e transazioni online, Integrazione con CRM e portali immobiliari, Supporto premium dedicato",
                            Durata = 30,
                            Nome = "Enterprise",
                            Prezzo = 499.00m
                        });
                });

            modelBuilder.Entity("Astami.Models.Agenzia", b =>
                {
                    b.Property<Guid>("AgenziaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AbbonamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CAP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Città")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DataRegistrazione")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Indirizzo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PartitaIVA")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinAccesso")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RagioneSociale")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Regione")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SDI")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SitoWeb")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AgenziaId");

                    b.HasIndex("AbbonamentoId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Città");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsPublic");

                    b.HasIndex("RagioneSociale");

                    b.ToTable("Agenzia");
                });

            modelBuilder.Entity("Astami.Models.AgenziaUtente", b =>
                {
                    b.Property<Guid>("AgenziaUtenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgenziaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataAssegnazione")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Ruolo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AgenziaUtenteId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("IsActive");

                    b.HasIndex("AgenziaId", "ApplicationUserId")
                        .IsUnique();

                    b.ToTable("AgenziaUtente");
                });

            modelBuilder.Entity("Astami.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AcceptNewsletter")
                        .HasColumnType("bit");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CAP")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Città")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CodiceFiscale")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Cognome")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataRegistrazione")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Indirizzo")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Provincia")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CodiceFiscale");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Astami.Models.Appuntamento", b =>
                {
                    b.Property<Guid>("AppuntamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgenziaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClienteUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreadoDaUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("GoogleCalendarEventId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ImmobileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("InviatoGoogleCalendar")
                        .HasColumnType("bit");

                    b.Property<string>("LinkVideoCall")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Luogo")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AppuntamentoId");

                    b.HasIndex("AgenziaId");

                    b.HasIndex("ClienteUserId");

                    b.HasIndex("CreadoDaUserId");

                    b.HasIndex("DataInizio");

                    b.HasIndex("ImmobileId");

                    b.HasIndex("Stato");

                    b.HasIndex("Tipo");

                    b.ToTable("Appuntamento");
                });

            modelBuilder.Entity("Astami.Models.AppuntamentoPartecipante", b =>
                {
                    b.Property<Guid>("AppuntamentoPartecipanteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AppuntamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataRisposta")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Ruolo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.HasKey("AppuntamentoPartecipanteId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Stato");

                    b.HasIndex("AppuntamentoId", "ApplicationUserId")
                        .IsUnique();

                    b.ToTable("AppuntamentoPartecipante");
                });

            modelBuilder.Entity("Astami.Models.Asta", b =>
                {
                    b.Property<Guid>("AstaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowRiduci")
                        .HasColumnType("bit");

                    b.Property<string>("CreadaDaUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ImmobileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("PrezzoCorrente")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrezzoPartenza")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PrezzoRiserva")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.HasKey("AstaId");

                    b.HasIndex("CreadaDaUserId");

                    b.HasIndex("DataFine");

                    b.HasIndex("DataInizio");

                    b.HasIndex("ImmobileId");

                    b.HasIndex("Stato");

                    b.ToTable("Asta");
                });

            modelBuilder.Entity("Astami.Models.AstaPartecipante", b =>
                {
                    b.Property<Guid>("AstaPartecipanteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AstaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataIscrizione")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApprovato")
                        .HasColumnType("bit");

                    b.Property<string>("NoteAgenzia")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AstaPartecipanteId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsApprovato");

                    b.HasIndex("AstaId", "ApplicationUserId")
                        .IsUnique();

                    b.ToTable("AstaPartecipante");
                });

            modelBuilder.Entity("Astami.Models.Immobile", b =>
                {
                    b.Property<Guid>("ImmobileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgenziaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CAP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Città")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClasseEnergetica")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataModifica")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("HasAscensore")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBalcone")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCantina")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGiardino")
                        .HasColumnType("bit");

                    b.Property<bool>("HasParcheggio")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTerrazza")
                        .HasColumnType("bit");

                    b.Property<string>("Indirizzo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("NumeroBagni")
                        .HasColumnType("int");

                    b.Property<int?>("NumeroLocali")
                        .HasColumnType("int");

                    b.Property<int?>("Piano")
                        .HasColumnType("int");

                    b.Property<decimal>("PrezzoBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProprietarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Provincia")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("SpeseCondominiali")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.Property<int?>("Superficie")
                        .HasColumnType("int");

                    b.Property<int>("TipoContratto")
                        .HasColumnType("int");

                    b.Property<int>("TipoImmobile")
                        .HasColumnType("int");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("ImmobileId");

                    b.HasIndex("AgenziaId");

                    b.HasIndex("Città");

                    b.HasIndex("IsPublished");

                    b.HasIndex("PrezzoBase");

                    b.HasIndex("ProprietarioId");

                    b.HasIndex("Stato");

                    b.HasIndex("TipoContratto");

                    b.HasIndex("TipoImmobile");

                    b.ToTable("Immobile");
                });

            modelBuilder.Entity("Astami.Models.ImmobileDocumento", b =>
                {
                    b.Property<Guid>("ImmobileDocumentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CaricatoDaUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataCaricamento")
                        .HasColumnType("datetime2");

                    b.Property<long>("DimensioneFile")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ImmobileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MimeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomeFile")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TipoDocumento")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ImmobileDocumentoId");

                    b.HasIndex("CaricatoDaUserId");

                    b.HasIndex("ImmobileId");

                    b.HasIndex("TipoDocumento");

                    b.ToTable("ImmobileDocumento");
                });

            modelBuilder.Entity("Astami.Models.ImmobileImmagine", b =>
                {
                    b.Property<Guid>("ImmobileImmagineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCaricamento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ImmobileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("Ordine")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ImmobileImmagineId");

                    b.HasIndex("ImmobileId");

                    b.HasIndex("IsPrimary");

                    b.HasIndex("Ordine");

                    b.ToTable("ImmobileImmagine");
                });

            modelBuilder.Entity("Astami.Models.Lead", b =>
                {
                    b.Property<Guid>("LeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgenziaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssegnatoAUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimoContatto")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ImmobileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Messaggio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NoteInterne")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LeadId");

                    b.HasIndex("AgenziaId");

                    b.HasIndex("AssegnatoAUserId");

                    b.HasIndex("DataCreazione");

                    b.HasIndex("Email");

                    b.HasIndex("ImmobileId");

                    b.HasIndex("Stato");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("Astami.Models.Notifica", b =>
                {
                    b.Property<Guid>("NotificaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLettura")
                        .HasColumnType("datetime2");

                    b.Property<string>("DatiAggiuntivi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsLetta")
                        .HasColumnType("bit");

                    b.Property<string>("Messaggio")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MittenteDaUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("NotificaId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DataCreazione");

                    b.HasIndex("IsLetta");

                    b.HasIndex("MittenteDaUserId");

                    b.HasIndex("Tipo");

                    b.ToTable("Notifica");
                });

            modelBuilder.Entity("Astami.Models.Offerta", b =>
                {
                    b.Property<Guid>("OffertaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AstaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataOfferta")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Importo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsWinning")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("OffertaId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("AstaId");

                    b.HasIndex("DataOfferta");

                    b.HasIndex("Importo");

                    b.HasIndex("IsWinning");

                    b.ToTable("Offerta");
                });

            modelBuilder.Entity("Astami.Models.Pagamento", b =>
                {
                    b.Property<Guid>("PagamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AbbonamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataScadenza")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImmobileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Importo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MetodoPagamento")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PagamentoId");

                    b.HasIndex("AbbonamentoId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DataPagamento");

                    b.HasIndex("ImmobileId");

                    b.HasIndex("Stato");

                    b.HasIndex("Tipo");

                    b.HasIndex("TransactionId");

                    b.ToTable("Pagamento");
                });

            modelBuilder.Entity("Astami.Models.PianoSelezionato", b =>
                {
                    b.Property<Guid>("PianoSelezionatoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AbbonamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Confermato")
                        .HasColumnType("bit");

                    b.HasKey("PianoSelezionatoId");

                    b.HasIndex("AbbonamentoId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PianoSelezionato");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.ApplicationUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.ApplicationUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.ApplicationUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.ApplicationUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Astami.Models.Agenzia", b =>
                {
                    b.HasOne("Astami.Models.Abbonamento", "Abbonamento")
                        .WithMany()
                        .HasForeignKey("AbbonamentoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Astami.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Abbonamento");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Astami.Models.AgenziaUtente", b =>
                {
                    b.HasOne("Astami.Models.Agenzia", "Agenzia")
                        .WithMany("AgenziaUtenti")
                        .HasForeignKey("AgenziaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Astami.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Agenzia");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Astami.Models.Appuntamento", b =>
                {
                    b.HasOne("Astami.Models.Agenzia", "Agenzia")
                        .WithMany()
                        .HasForeignKey("AgenziaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Astami.Models.ApplicationUser", "ClienteUser")
                        .WithMany()
                        .HasForeignKey("ClienteUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Astami.Models.ApplicationUser", "CreadoDaUser")
                        .WithMany()
                        .HasForeignKey("CreadoDaUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Astami.Models.Immobile", "Immobile")
                        .WithMany("Appuntamenti")
                        .HasForeignKey("ImmobileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Agenzia");

                    b.Navigation("ClienteUser");

                    b.Navigation("CreadoDaUser");

                    b.Navigation("Immobile");
                });

            modelBuilder.Entity("Astami.Models.AppuntamentoPartecipante", b =>
                {
                    b.HasOne("Astami.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Astami.Models.Appuntamento", "Appuntamento")
                        .WithMany("Partecipanti")
                        .HasForeignKey("AppuntamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Appuntamento");
                });

            modelBuilder.Entity("Astami.Models.Asta", b =>
                {
                    b.HasOne("Astami.Models.ApplicationUser", "CreadaDaUser")
                        .WithMany()
                        .HasForeignKey("CreadaDaUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Astami.Models.Immobile", "Immobile")
                        .WithMany("Aste")
                        .HasForeignKey("ImmobileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreadaDaUser");

                    b.Navigation("Immobile");
                });

            modelBuilder.Entity("Astami.Models.AstaPartecipante", b =>
                {
                    b.HasOne("Astami.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Astami.Models.Asta", "Asta")
                        .WithMany("Partecipanti")
                        .HasForeignKey("AstaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Asta");
                });

            modelBuilder.Entity("Astami.Models.Immobile", b =>
                {
                    b.HasOne("Astami.Models.Agenzia", "Agenzia")
                        .WithMany("Immobili")
                        .HasForeignKey("AgenziaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Astami.Models.ApplicationUser", "Proprietario")
                        .WithMany()
                        .HasForeignKey("ProprietarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Agenzia");

                    b.Navigation("Proprietario");
                });

            modelBuilder.Entity("Astami.Models.ImmobileDocumento", b =>
                {
                    b.HasOne("Astami.Models.ApplicationUser", "CaricatoDaUser")
                        .WithMany()
                        .HasForeignKey("CaricatoDaUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Astami.Models.Immobile", "Immobile")
                        .WithMany("Documenti")
                        .HasForeignKey("ImmobileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaricatoDaUser");

                    b.Navigation("Immobile");
                });

            modelBuilder.Entity("Astami.Models.ImmobileImmagine", b =>
                {
                    b.HasOne("Astami.Models.Immobile", "Immobile")
                        .WithMany("Immagini")
                        .HasForeignKey("ImmobileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Immobile");
                });

            modelBuilder.Entity("Astami.Models.Lead", b =>
                {
                    b.HasOne("Astami.Models.Agenzia", "Agenzia")
                        .WithMany("Leads")
                        .HasForeignKey("AgenziaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Astami.Models.ApplicationUser", "AssegnatoAUser")
                        .WithMany()
                        .HasForeignKey("AssegnatoAUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astami.Models.Immobile", "Immobile")
                        .WithMany("Leads")
                        .HasForeignKey("ImmobileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Agenzia");

                    b.Navigation("AssegnatoAUser");

                    b.Navigation("Immobile");
                });

            modelBuilder.Entity("Astami.Models.Notifica", b =>
                {
                    b.HasOne("Astami.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Astami.Models.ApplicationUser", "MittenteDaUser")
                        .WithMany()
                        .HasForeignKey("MittenteDaUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApplicationUser");

                    b.Navigation("MittenteDaUser");
                });

            modelBuilder.Entity("Astami.Models.Offerta", b =>
                {
                    b.HasOne("Astami.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Astami.Models.Asta", "Asta")
                        .WithMany("Offerte")
                        .HasForeignKey("AstaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Asta");
                });

            modelBuilder.Entity("Astami.Models.Pagamento", b =>
                {
                    b.HasOne("Astami.Models.Abbonamento", "Abbonamento")
                        .WithMany()
                        .HasForeignKey("AbbonamentoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Astami.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Astami.Models.Immobile", "Immobile")
                        .WithMany()
                        .HasForeignKey("ImmobileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Abbonamento");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Immobile");
                });

            modelBuilder.Entity("Astami.Models.PianoSelezionato", b =>
                {
                    b.HasOne("Astami.Models.Abbonamento", null)
                        .WithMany()
                        .HasForeignKey("AbbonamentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Astami.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.ApplicationUserClaim<string>", b =>
                {
                    b.HasOne("Astami.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.ApplicationUserLogin<string>", b =>
                {
                    b.HasOne("Astami.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.ApplicationUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Astami.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.ApplicationUserToken<string>", b =>
                {
                    b.HasOne("Astami.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Astami.Models.Agenzia", b =>
                {
                    b.Navigation("AgenziaUtenti");

                    b.Navigation("Immobili");

                    b.Navigation("Leads");
                });

            modelBuilder.Entity("Astami.Models.Appuntamento", b =>
                {
                    b.Navigation("Partecipanti");
                });

            modelBuilder.Entity("Astami.Models.Asta", b =>
                {
                    b.Navigation("Offerte");

                    b.Navigation("Partecipanti");
                });

            modelBuilder.Entity("Astami.Models.Immobile", b =>
                {
                    b.Navigation("Appuntamenti");

                    b.Navigation("Aste");

                    b.Navigation("Documenti");

                    b.Navigation("Immagini");

                    b.Navigation("Leads");
                });
#pragma warning restore 612, 618
        }
    }
}
